import React, { useContext, useEffect, useState } from 'react';
import { View, Text, StyleSheet, TextInput, ScrollView, TouchableOpacity, SafeAreaView } from 'react-native';
import Ionicons from '@expo/vector-icons/Ionicons';
import ThemeContext from '../context/ThemeContext';
import ResultList from '../flatlists/ResultsList';
import CreatePlaylistButton from '../Buttons/CreatePlaylistButton';
import ImageUploader, { selectedImageB64 } from '../imageUploader/ImageUploader';
import { CreatePlaylist } from '../api/Spotify - Playlist/SpotifyCreatePlaylist';
import { AddCoverImage } from '../api/Spotify - Playlist/SpotifyAddCustomCover';
import { AddItemsToPlaylist } from '../api/Spotify - Playlist/SpotifyAddItemsToPlaylist';
import { UserContext } from '../context/UserDetailsContext';
import { TracklistContext } from '../context/GameTracklist';
import { fetchTrackDetails } from '../api/Spotify - Search/FetchTrackDetails';
import { AuthContext } from '../context/AccessTokenContext';


const EditPlaylistDetailsScreen = () => {
  const { theme } = useContext(ThemeContext);
  const { userDetails, market } = useContext(UserContext);
  const { accessToken } = useContext(AuthContext);
  const { recommendedTrackIds } = useContext(TracklistContext);

  const userId = userDetails.userId;
  const displayName = userDetails.displayName;

  const [playlistName, setPlaylistName] = useState('User Generated Playlist');
  const [playlistDescription, setPlaylistDescription] = useState(`A playlist generated by ${displayName}`);
  const [data, setData] = useState([]);
  const [selectedIndex, setSelectedIndex] = useState(null);

  
  useEffect(() => {
    const fetchData = async () => {
      try {
        const tracks = recommendedTrackIds.join(',');
        const trackDetails = await fetchTrackDetails(accessToken, tracks, market);
        setData(trackDetails);
      } catch (error) {
        console.error('Error fetching track details:', error);
      }
    };

    fetchData();
  }, [accessToken, recommendedTrackIds, market]);


  const handleItemPress = (index) => {
    setSelectedIndex(index);
  };

  const handleRemovingItem = () => {
    if (selectedIndex !== null) {
      const updatedData = data.filter((item, index) => index !== selectedIndex);
      setData(updatedData);
      setSelectedIndex(null);
    } else {
      console.log('No item selected for removal.');
    }
  };
  


  ///// work in progress
  const handleCreatePlaylist = async () => {
    if (data.length !== 0) {
      try {
        const playlistId = await CreatePlaylist({accessToken, userId, playlistName, playlistDescription});
        //await AddCoverImage({accessToken, playlistId, selectedImageB64}); //does not currently work, image is too big
        await AddItemsToPlaylist({accessToken, playlistId, uris});

    } catch (error) {
        console.error('Error creating playlist:', error);
        alert('Failed to create playlist. Please try again.');
    }
  } else {
    console.error("Error creating playlist:", error);
    alert('Failed to create playlist, please try again.');
  }
};
  ///// work in progress

  const styles = StyleSheet.create({
    container: {
      flexGrow: 1,
      backgroundColor: theme === 'dark' ? '#2B2B2B' : '#FCFCFC',
      alignItems: 'center',
      padding: 30,
      width: '100%',
    },
    imageText: {
      fontSize: 20,
      marginBottom: 40,
      color: theme === 'dark' ? '#FCFCFC' : '#2B2B2B',
    },
    input: {
      height: 40,
      width: 300,
      borderColor: theme === 'dark' ? '#FCFCFC' : '#2B2B2B',
      borderWidth: 1,
      borderRadius: 10,
      marginBottom: 15,
      paddingHorizontal: 15,
      color: theme === 'dark' ? '#FCFCFC' : '#2B2B2B',
    },
    results: {
      width: '110%',
      marginVertical: 10,
    },
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between',
      paddingHorizontal: 20,
    },
    leftText: {
      textAlign: 'left',
      color: theme === 'dark' ? '#FCFCFC' : '#2B2B2B',
    },
    rightSection: {
      flexDirection: 'row',
      alignItems: 'center',
    },
    label: {
      color: theme === 'dark' ? '#FCFCFC' : '#2B2B2B',
      marginHorizontal: 10,
      marginVertical: 5,
    },
    stickyButtonContainer: {
      position: 'absolute',
      bottom: 50,
      left: 0,
      right: 0,
      alignItems: 'center',
      zIndex: 10,
    },
    scrollViewContent: {
      paddingBottom: 100,
    },
  });

  return (
    <SafeAreaView style={{ backgroundColor: theme === 'dark' ? '#2B2B2B' : '#FCFCFC', flex: 1 }}>
      <ScrollView contentContainerStyle={[styles.container, styles.scrollViewContent]}>
        <ImageUploader />
        <Text style={styles.imageText}>Change cover art</Text>
        <View>
          <Text style={styles.label}>Enter playlist name:</Text>
          <TextInput
            style={styles.input}
            placeholder="Enter playlist name"
            value={playlistName}
            onChangeText={setPlaylistName}
          />
          <Text style={styles.label}>Enter playlist description:</Text>
          <TextInput
            style={styles.input}
            placeholder="Enter playlist description"
            value={playlistDescription}
            onChangeText={setPlaylistDescription}
          />
        </View>

        <View style={styles.results}>
          <View style={styles.row}>
            <Text style={styles.leftText}>Tracks:</Text>
            <TouchableOpacity
              style={styles.rightSection}
              onPress={handleRemovingItem}
            >
              <Text style={{ color: theme === 'dark' ? '#FCFCFC' : '#2B2B2B' }}>Remove selected from list</Text>
              <Ionicons name="trash-outline" size={24} color={'#1ED750'} />
            </TouchableOpacity>
          </View>
        </View>

        <ResultList
          style={styles.results}
          data={data}
          imgSize={55}
          headingSize={16}
          descriptionSize={14}
          selectedIndex={selectedIndex}
          onPress={handleItemPress}
        />
      </ScrollView>
      <View style={styles.stickyButtonContainer}>
        <CreatePlaylistButton onPress={handleCreatePlaylist} />
      </View>
    </SafeAreaView>
  );
};

export default EditPlaylistDetailsScreen;
