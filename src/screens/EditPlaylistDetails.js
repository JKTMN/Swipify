import React, { useContext, useEffect, useState } from 'react';
import { View, Text, StyleSheet, TextInput, ScrollView, TouchableOpacity, SafeAreaView } from 'react-native';
import Ionicons from '@expo/vector-icons/Ionicons';
import ThemeContext from '../context/ThemeContext';
import ResultList from '../flatlists/ResultsList';
import CreatePlaylistButton from '../Buttons/CreatePlaylistButton';
import ImageUploader from '../imageUploader/ImageUploader';
import { CreatePlaylist } from '../api/Spotify - Playlist/SpotifyCreatePlaylist';
import { AddCoverImage } from '../api/Spotify - Playlist/SpotifyAddCustomCover';
import { AddItemsToPlaylist } from '../api/Spotify - Playlist/SpotifyAddItemsToPlaylist';
import { UserContext } from '../context/UserDetailsContext';
import { TracklistContext } from '../context/GameTracklist';
import { fetchTrackDetails } from '../api/Spotify - Search/FetchTrackDetails';
import { AuthContext } from '../context/AccessTokenContext';
import { useNavigation } from '@react-navigation/native';
import { getPlaylistDetails } from '../api/Spotify - Playlist/SpotifyGetPlaylistDetails';
import { PlaylistsContext } from '../context/PlaylistsContext';

/**
 * EditPlaylistDetailsScreen is used in the StackNavigator and is used for editing the playlist details,
 * this includes: playlist cover image, name, and description. View and edit tracks in playlist,
 * and handles the playlist creation.
 * 
 * @component
 * @returns {JSX.Element} The rendered EditPlaylistDetailsScreen component.
 */

const EditPlaylistDetailsScreen = () => {
  const { theme } = useContext(ThemeContext);
  const { userDetails, market } = useContext(UserContext);
  const { accessToken } = useContext(AuthContext);
  const { savePlaylist } = useContext(PlaylistsContext)
  const { recommendedTrackIds, 
    clearSelectedTrack, 
    clearGameTrackIds, 
    clearLikedSongs, 
    clearDislikedSongs, 
    clearRecommendedTrackIds
   } = useContext(TracklistContext);
  const navigation = useNavigation();
  const userId = userDetails.userId;
  const displayName = userDetails.displayName;
  const [playlistName, setPlaylistName] = useState('User Generated Playlist');
  const [playlistDescription, setPlaylistDescription] = useState(`A playlist generated by ${displayName}`);
  const [data, setData] = useState([]);
  const [selectedIndex, setSelectedIndex] = useState(null);
  const [selectedImageB64, setSelectedImageB64] = useState('');

/**
 * Fetches track details from Spotify API when recommended tracks are available.
 * @async
 * @function useEffect
 * @function fetchData
 * @returns {Promise<void>}
 */
  useEffect(() => {
    const fetchData = async () => {
      if (recommendedTrackIds && recommendedTrackIds.length > 0) {
        try {
          const tracks = recommendedTrackIds.join(',');
          const trackDetails = await fetchTrackDetails(accessToken, tracks, market);
          setData(trackDetails);
        } catch (error) {
          console.error('Error fetching track details:', error);
        }
      }
    };

    fetchData();
  }, [accessToken, recommendedTrackIds, market]);

  /**
   * Handles selection of a track for removal
   * @function handleItemPress
   * @param {number} index - Index of the selected track.
   */
  const handleItemPress = (index) => {
    setSelectedIndex(index);
  };

  /**
   * Removes the selected track from the playlist.
   * @function handleRemovingItem
   */
  const handleRemovingItem = () => {
    if (selectedIndex !== null) {
      const updatedData = data.filter((item, index) => index !== selectedIndex);
      setData(updatedData);
      setSelectedIndex(null);
    } else {
      alert('No item selected for removal.');
    }
  };

  /**
   * Handles playlist creation by interacting with the Spotify API
   * adds tracks, updates playlist cover and clears track contexts after creation,
   * navigates the user back to the HomeScreen.
   * 
   * @async
   * @function handleCreatePlaylist
   * @returns {Promise<void>}
   */
  const handleCreatePlaylist = async () => {
    if (!data || data.length === 0) {
      alert('No tracks to add to the playlist. Please add some tracks.');
      return;
    }
  
    try {
      const playlistId = await CreatePlaylist({
        accessToken,
        userId,
        playlistName,
        playlistDescription,
      });

      const uris = data?.map((track) => track.uri) || [];
      await AddItemsToPlaylist({
        accessToken,
        playlistId,
        uris,
      });

      if (selectedImageB64 !== null) {
        let imageBase64 = selectedImageB64;
        if (imageBase64 && !imageBase64.startsWith('data:image')) {
          imageBase64 = `data:image/jpeg;base64,${imageBase64}`;
        }

        if (imageBase64) {
          await AddCoverImage({
            accessToken,
            playlistId,
            selectedImageB64: imageBase64,
          });
        }
      }

      const playlist = await getPlaylistDetails(accessToken, playlistId, market);
      savePlaylist(playlist);
  
  
      alert('Playlist created successfully!');
      clearSelectedTrack();
      clearGameTrackIds();
      clearLikedSongs();
      clearDislikedSongs();
      clearRecommendedTrackIds();
      navigation.navigate('Back');
    } catch (error) {
      console.error('Error creating playlist:', error.message);
      alert('Failed to create playlist. Please try again.');
    }
  };
  

  const styles = StyleSheet.create({
    container: {
      flexGrow: 1,
      backgroundColor: theme === 'dark' ? '#2B2B2B' : '#FCFCFC',
      alignItems: 'center',
      padding: 30,
      width: '100%',
    },
    imageText: {
      fontSize: 20,
      marginBottom: 40,
      color: theme === 'dark' ? '#FCFCFC' : '#2B2B2B',
    },
    input: {
      height: 40,
      width: 300,
      borderColor: theme === 'dark' ? '#FCFCFC' : '#2B2B2B',
      borderWidth: 1,
      borderRadius: 10,
      marginBottom: 15,
      paddingHorizontal: 15,
      color: theme === 'dark' ? '#FCFCFC' : '#2B2B2B',
    },
    results: {
      width: '110%',
      marginVertical: 10,
    },
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between',
      paddingHorizontal: 20,
    },
    leftText: {
      textAlign: 'left',
      color: theme === 'dark' ? '#FCFCFC' : '#2B2B2B',
    },
    rightSection: {
      flexDirection: 'row',
      alignItems: 'center',
    },
    label: {
      color: theme === 'dark' ? '#FCFCFC' : '#2B2B2B',
      marginHorizontal: 10,
      marginVertical: 5,
    },
    stickyButtonContainer: {
      position: 'absolute',
      bottom: 50,
      left: 0,
      right: 0,
      alignItems: 'center',
      zIndex: 10,
    },
    scrollViewContent: {
      paddingBottom: 100,
    },
  });

  return (
    <SafeAreaView style={{ backgroundColor: theme === 'dark' ? '#2B2B2B' : '#FCFCFC', flex: 1 }}>
      <ScrollView contentContainerStyle={[styles.container, styles.scrollViewContent]}>
        <ImageUploader 
        accessible={true}
        accessibilityLabel="Image uploader"
        accessibilityHint="Tap here to select an image"
        onImageSelect={(base64) => setSelectedImageB64(base64)} />
        <Text accessibilityLabel="change cover art" style={styles.imageText}>Change cover art</Text>
        <View accessibility={true} accessibilityLabel="Text fields">
          <Text accessibilityLabel="label for text input: enter playlist name" style={styles.label}>Enter playlist name:</Text>
          <TextInput
            accessability={true}
            accessabilityHint="Enter a name for the playlist"
            style={styles.input}
            placeholder="Enter playlist name"
            value={playlistName}
            onChangeText={setPlaylistName}
          />
          <Text accessibilityLabel="label for text input: enter playlist description" style={styles.label}>Enter playlist description:</Text>
          <TextInput
            accessibility={true}
            accessibilityHint="Enter a description for the playlist"
            style={styles.input}
            placeholder="Enter playlist description"
            value={playlistDescription}
            onChangeText={setPlaylistDescription}
          />
        </View>

        <View style={styles.results} accessibility={true}>
          <View style={styles.row}>
            <Text accessibility={true} accessabilityLabel="Label for tracks list" style={styles.leftText}>Tracks:</Text>
            <TouchableOpacity
              accessibilityRole="button"
              accessabilityHint="Once a track is selected, use this button to remove it from the playlist"
              style={styles.rightSection}
              onPress={handleRemovingItem}
            >
              <Text style={{ color: theme === 'dark' ? '#FCFCFC' : '#2B2B2B' }}>Remove selected from list</Text>
              <Ionicons name="trash-outline" size={24} color={'#1ED750'} />
            </TouchableOpacity>
          </View>
        </View>

        <ResultList
          accessability={true}
          accessibilityLabel="List of tracks in playlist"
          accessabilityHint="Select a track from the results to remove"
          style={styles.results}
          data={data}
          selectedIndex={selectedIndex}
          onPress={handleItemPress}
        />
      </ScrollView>
      <View style={styles.stickyButtonContainer}>
        <CreatePlaylistButton onPress={handleCreatePlaylist} />
      </View>
    </SafeAreaView>
  );
};

export default EditPlaylistDetailsScreen;